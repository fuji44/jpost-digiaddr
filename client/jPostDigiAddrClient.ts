/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import {
  type ApiRequestBuilder,
  ApiRequestBuilderNavigationMetadata,
} from "./api/index.ts";
// @ts-ignore
import {
  apiClientProxifier,
  type BaseRequestBuilder,
  type KeysToExcludeForNavigationMetadata,
  type NavigationMetadata,
  ParseNodeFactoryRegistry,
  type RequestAdapter,
  SerializationWriterFactoryRegistry,
} from "@microsoft/kiota-abstractions";
// @ts-ignore
import {
  FormParseNodeFactory,
  FormSerializationWriterFactory,
} from "@microsoft/kiota-serialization-form";
// @ts-ignore
import {
  JsonParseNodeFactory,
  JsonSerializationWriterFactory,
} from "@microsoft/kiota-serialization-json";
// @ts-ignore
import { MultipartSerializationWriterFactory } from "@microsoft/kiota-serialization-multipart";
// @ts-ignore
import {
  TextParseNodeFactory,
  TextSerializationWriterFactory,
} from "@microsoft/kiota-serialization-text";

/**
 * Instantiates a new {@link JPostDigiAddrClient} and sets the default values.
 * @param requestAdapter The request adapter to use to execute the requests.
 */
// @ts-ignore
export function createJPostDigiAddrClient(
  requestAdapter: RequestAdapter,
): JPostDigiAddrClient {
  if (requestAdapter === undefined) {
    throw new Error("requestAdapter cannot be undefined");
  }
  let serializationWriterFactory: SerializationWriterFactoryRegistry;
  let parseNodeFactoryRegistry: ParseNodeFactoryRegistry;

  if (
    requestAdapter.getParseNodeFactory() instanceof ParseNodeFactoryRegistry
  ) {
    parseNodeFactoryRegistry = requestAdapter
      .getParseNodeFactory() as ParseNodeFactoryRegistry;
  } else {
    throw new Error(
      "requestAdapter.getParseNodeFactory() is not a ParseNodeFactoryRegistry",
    );
  }

  if (
    requestAdapter.getSerializationWriterFactory() instanceof
      SerializationWriterFactoryRegistry
  ) {
    serializationWriterFactory = requestAdapter
      .getSerializationWriterFactory() as SerializationWriterFactoryRegistry;
  } else {
    throw new Error(
      "requestAdapter.getSerializationWriterFactory() is not a SerializationWriterFactoryRegistry",
    );
  }

  serializationWriterFactory.registerDefaultSerializer(
    JsonSerializationWriterFactory,
  );
  serializationWriterFactory.registerDefaultSerializer(
    TextSerializationWriterFactory,
  );
  serializationWriterFactory.registerDefaultSerializer(
    FormSerializationWriterFactory,
  );
  serializationWriterFactory.registerDefaultSerializer(
    MultipartSerializationWriterFactory,
  );

  const backingStoreFactory = requestAdapter.getBackingStoreFactory();
  parseNodeFactoryRegistry.registerDefaultDeserializer(
    JsonParseNodeFactory,
    backingStoreFactory,
  );
  parseNodeFactoryRegistry.registerDefaultDeserializer(
    TextParseNodeFactory,
    backingStoreFactory,
  );
  parseNodeFactoryRegistry.registerDefaultDeserializer(
    FormParseNodeFactory,
    backingStoreFactory,
  );
  if (
    requestAdapter.baseUrl === undefined || requestAdapter.baseUrl === null ||
    requestAdapter.baseUrl === ""
  ) {
    requestAdapter.baseUrl = "https://api.da.pf.japanpost.jp";
  }
  const pathParameters: Record<string, unknown> = {
    "baseurl": requestAdapter.baseUrl,
  };
  return apiClientProxifier<JPostDigiAddrClient>(
    requestAdapter,
    pathParameters,
    JPostDigiAddrClientNavigationMetadata,
    undefined,
  );
}
/**
 * The main entry point of the SDK, exposes the configuration and the fluent API.
 */
export interface JPostDigiAddrClient
  extends BaseRequestBuilder<JPostDigiAddrClient> {
  /**
   * The api property
   */
  get api(): ApiRequestBuilder;
}
/**
 * Uri template for the request builder.
 */
export const JPostDigiAddrClientUriTemplate = "{+baseurl}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const JPostDigiAddrClientNavigationMetadata: Record<
  Exclude<keyof JPostDigiAddrClient, KeysToExcludeForNavigationMetadata>,
  NavigationMetadata
> = {
  api: {
    navigationMetadata: ApiRequestBuilderNavigationMetadata,
  },
};
/* tslint:enable */
/* eslint-enable */
