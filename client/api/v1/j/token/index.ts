/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import {
  type BadRequest,
  createBadRequestFromDiscriminatorValue,
  createErrorEscapedFromDiscriminatorValue,
  createForbiddenFromDiscriminatorValue,
  createJtokenResFromDiscriminatorValue,
  createUnauthorizedFromDiscriminatorValue,
  type ErrorEscaped,
  type Forbidden,
  type JtokenReq,
  type JtokenRes,
  serializeJtokenReq,
  serializeJtokenRes,
  type Unauthorized,
} from "../../../../models/index.ts";
// @ts-ignore
import {
  type BaseRequestBuilder,
  type Parsable,
  type ParsableFactory,
  type RequestConfiguration,
  type RequestInformation,
  type RequestsMetadata,
} from "@microsoft/kiota-abstractions";

/**
 * Builds and executes requests for operations under /api/v1/j/token
 */
export interface TokenRequestBuilder
  extends BaseRequestBuilder<TokenRequestBuilder> {
  /**
   * OAuth2.0におけるgrant_typeがclient_credentialsに基づいてトークンリクエストに対してAPI利用のトークンを返す。<br>grant_typeとともに、組織およびシステム登録で事前に取得しているクライアントIDとシークレットキーを指定してリクエストし、検証結果が問題ない場合はJWT形式のトークンを返却。
   * @param body The request body
   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
   * @returns {Promise<JtokenRes>}
   * @throws {BadRequest} error when the service returns a 400 status code
   * @throws {Unauthorized} error when the service returns a 401 status code
   * @throws {Forbidden} error when the service returns a 403 status code
   * @throws {ErrorEscaped} error when the service returns a 500 status code
   */
  post(
    body: JtokenReq,
    requestConfiguration?: RequestConfiguration<object> | undefined,
  ): Promise<JtokenRes | undefined>;
  /**
   * OAuth2.0におけるgrant_typeがclient_credentialsに基づいてトークンリクエストに対してAPI利用のトークンを返す。<br>grant_typeとともに、組織およびシステム登録で事前に取得しているクライアントIDとシークレットキーを指定してリクエストし、検証結果が問題ない場合はJWT形式のトークンを返却。
   * @param body The request body
   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
   * @returns {RequestInformation}
   */
  toPostRequestInformation(
    body: JtokenReq,
    requestConfiguration?: RequestConfiguration<object> | undefined,
  ): RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TokenRequestBuilderUriTemplate = "{+baseurl}/api/v1/j/token";
/**
 * Metadata for all the requests in the request builder.
 */
export const TokenRequestBuilderRequestsMetadata: RequestsMetadata = {
  post: {
    uriTemplate: TokenRequestBuilderUriTemplate,
    responseBodyContentType: "application/json",
    errorMappings: {
      400: createBadRequestFromDiscriminatorValue as ParsableFactory<Parsable>,
      401: createUnauthorizedFromDiscriminatorValue as ParsableFactory<
        Parsable
      >,
      403: createForbiddenFromDiscriminatorValue as ParsableFactory<Parsable>,
      500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<
        Parsable
      >,
    },
    adapterMethodName: "send",
    responseBodyFactory: createJtokenResFromDiscriminatorValue,
    requestBodyContentType: "application/json",
    requestBodySerializer: serializeJtokenReq,
    requestInformationContentSetMethod: "setContentFromParsable",
  },
};
/* tslint:enable */
/* eslint-enable */
