/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import {
  type AddressReq,
  type AddressRes,
  type BadRequest,
  createAddressResFromDiscriminatorValue,
  createBadRequestFromDiscriminatorValue,
  createErrorEscapedFromDiscriminatorValue,
  createNotFoundFromDiscriminatorValue,
  createUnauthorizedFromDiscriminatorValue,
  type ErrorEscaped,
  type NotFound,
  serializeAddressReq,
  serializeAddressRes,
  type Unauthorized,
} from "../../../models/index.ts";
// @ts-ignore
import {
  type BaseRequestBuilder,
  type Parsable,
  type ParsableFactory,
  type RequestConfiguration,
  type RequestInformation,
  type RequestsMetadata,
} from "@microsoft/kiota-abstractions";

/**
 * Builds and executes requests for operations under /api/v1/addresszip
 */
export interface AddresszipRequestBuilder
  extends BaseRequestBuilder<AddresszipRequestBuilder> {
  /**
   * 住所の一部から該当する郵便番号・住所情報を検索
   * @param body The request body
   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
   * @returns {Promise<AddressRes>}
   * @throws {BadRequest} error when the service returns a 400 status code
   * @throws {Unauthorized} error when the service returns a 401 status code
   * @throws {NotFound} error when the service returns a 404 status code
   * @throws {ErrorEscaped} error when the service returns a 500 status code
   */
  post(
    body: AddressReq,
    requestConfiguration?:
      | RequestConfiguration<AddresszipRequestBuilderPostQueryParameters>
      | undefined,
  ): Promise<AddressRes | undefined>;
  /**
   * 住所の一部から該当する郵便番号・住所情報を検索
   * @param body The request body
   * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
   * @returns {RequestInformation}
   */
  toPostRequestInformation(
    body: AddressReq,
    requestConfiguration?:
      | RequestConfiguration<AddresszipRequestBuilderPostQueryParameters>
      | undefined,
  ): RequestInformation;
}
/**
 * 住所の一部から該当する郵便番号・住所情報を検索
 */
export interface AddresszipRequestBuilderPostQueryParameters {
  /**
   * プロバイダーのユーザーID (クエリパラメーター)
   */
  ecUid?: string;
}
/**
 * Uri template for the request builder.
 */
export const AddresszipRequestBuilderUriTemplate =
  "{+baseurl}/api/v1/addresszip{?ec_uid*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AddresszipRequestBuilderPostQueryParametersMapper: Record<
  string,
  string
> = {
  "ecUid": "ec_uid",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AddresszipRequestBuilderRequestsMetadata: RequestsMetadata = {
  post: {
    uriTemplate: AddresszipRequestBuilderUriTemplate,
    responseBodyContentType: "application/json",
    errorMappings: {
      400: createBadRequestFromDiscriminatorValue as ParsableFactory<Parsable>,
      401: createUnauthorizedFromDiscriminatorValue as ParsableFactory<
        Parsable
      >,
      404: createNotFoundFromDiscriminatorValue as ParsableFactory<Parsable>,
      500: createErrorEscapedFromDiscriminatorValue as ParsableFactory<
        Parsable
      >,
    },
    adapterMethodName: "send",
    responseBodyFactory: createAddressResFromDiscriminatorValue,
    requestBodyContentType: "application/json",
    requestBodySerializer: serializeAddressReq,
    requestInformationContentSetMethod: "setContentFromParsable",
    queryParametersMapper: AddresszipRequestBuilderPostQueryParametersMapper,
  },
};
/* tslint:enable */
/* eslint-enable */
